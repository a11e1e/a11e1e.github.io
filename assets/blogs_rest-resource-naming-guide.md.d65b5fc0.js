import{_ as e,c as a,o as d,d as i}from"./app.85190ff3.js";const t='{"title":"REST 资源命名指南","description":"在 REST 中，数据可以被抽象成资源。而一个统一且健壮的资源命名策略很重要。","frontmatter":{"date":"2021-12-01T00:00:00.000Z","title":"REST 资源命名指南","description":"在 REST 中，数据可以被抽象成资源。而一个统一且健壮的资源命名策略很重要。"},"headers":[{"level":2,"title":"什么是资源？","slug":"什么是资源？"},{"level":3,"title":"资源可以是单例，也可以是集合","slug":"资源可以是单例，也可以是集合"},{"level":3,"title":"资源也可以包含子集合资源。","slug":"资源也可以包含子集合资源。"},{"level":2,"title":"资源命名最佳实践","slug":"资源命名最佳实践"},{"level":3,"title":"用名词来表示资源","slug":"用名词来表示资源"},{"level":3,"title":"一致性","slug":"一致性"},{"level":3,"title":"不要使用文件扩展名","slug":"不要使用文件扩展名"},{"level":3,"title":"永远不要在 URI 中使用 CRUD 函数名","slug":"永远不要在-uri-中使用-crud-函数名"},{"level":3,"title":"使用 query 来过滤资源集合","slug":"使用-query-来过滤资源集合"}],"relativePath":"blogs/rest-resource-naming-guide.md","lastUpdated":1638347072021}',r={},n=[i('<h1 id="rest-资源命名指南" tabindex="-1">REST 资源命名指南 <a class="header-anchor" href="#rest-资源命名指南" aria-hidden="true">#</a></h1><h2 id="什么是资源？" tabindex="-1">什么是资源？ <a class="header-anchor" href="#什么是资源？" aria-hidden="true">#</a></h2><blockquote><p>任何可以命名的信息都可以是资源：文档或图像、临时服务（如“今天的洛杉矶天气”）、其他资源的集合、非虚拟对象（如人）等等。</p></blockquote><h3 id="资源可以是单例，也可以是集合" tabindex="-1">资源可以是单例，也可以是集合 <a class="header-anchor" href="#资源可以是单例，也可以是集合" aria-hidden="true">#</a></h3><p><code>/customers</code>是集合。<code>/customers/{customerId}</code>是单例。</p><h3 id="资源也可以包含子集合资源。" tabindex="-1">资源也可以包含子集合资源。 <a class="header-anchor" href="#资源也可以包含子集合资源。" aria-hidden="true">#</a></h3><p>例如，<code>/customers/{customerId}/accounts</code>就表示某一客户下的所有账户。<code>/customers/{customerId}/accounts/{accountId}</code>是一个单例。</p><h2 id="资源命名最佳实践" tabindex="-1">资源命名最佳实践 <a class="header-anchor" href="#资源命名最佳实践" aria-hidden="true">#</a></h2><h3 id="用名词来表示资源" tabindex="-1">用名词来表示资源 <a class="header-anchor" href="#用名词来表示资源" aria-hidden="true">#</a></h3><ul><li>用名词的复数形式表示一个资源的集合。<code>/customers</code></li><li>用单数形式表示单个资源。<code>/customers/{customerId}</code></li></ul><h3 id="一致性" tabindex="-1">一致性 <a class="header-anchor" href="#一致性" aria-hidden="true">#</a></h3><h4 id="使用正斜杠（-）表示层次关系" tabindex="-1">使用正斜杠（/）表示层次关系 <a class="header-anchor" href="#使用正斜杠（-）表示层次关系" aria-hidden="true">#</a></h4><div class="language-"><pre><code>http://api.example.com/device-management\nhttp://api.example.com/device-management/managed-devices\nhttp://api.example.com/device-management/managed-devices/{id}\nhttp://api.example.com/device-management/managed-devices/{id}/scripts\nhttp://api.example.com/device-management/managed-devices/{id}/scripts/{id}\n</code></pre></div><h4 id="不要以正斜杠（-）结尾" tabindex="-1">不要以正斜杠（/）结尾 <a class="header-anchor" href="#不要以正斜杠（-）结尾" aria-hidden="true">#</a></h4><h4 id="使用连字符（-）提高-uri-的可读性" tabindex="-1">使用连字符（-）提高 URI 的可读性 <a class="header-anchor" href="#使用连字符（-）提高-uri-的可读性" aria-hidden="true">#</a></h4><h4 id="不要使用下划线（-）" tabindex="-1">不要使用下划线（_） <a class="header-anchor" href="#不要使用下划线（-）" aria-hidden="true">#</a></h4><h4 id="在-uri-中使用小写" tabindex="-1">在 URI 中使用小写 <a class="header-anchor" href="#在-uri-中使用小写" aria-hidden="true">#</a></h4><h3 id="不要使用文件扩展名" tabindex="-1">不要使用文件扩展名 <a class="header-anchor" href="#不要使用文件扩展名" aria-hidden="true">#</a></h3><p>如果非要指示文件类型，使用<code>Content-Type</code>。</p><h3 id="永远不要在-uri-中使用-crud-函数名" tabindex="-1">永远不要在 URI 中使用 CRUD 函数名 <a class="header-anchor" href="#永远不要在-uri-中使用-crud-函数名" aria-hidden="true">#</a></h3><p>URI 中不要带有 CRUD 函数。URI 应该只用于唯一地标识资源，而不是对资源执行任何操作。</p><p>我们应该使用 HTTP 请求方法来指示执行哪个 CRUD 函数。</p><div class="language-HTTP GET http://api.example.com/device-management/managed-devices //Get all devices"><pre><code>HTTP POST http://api.example.com/device-management/managed-devices  //Create new Device\n\nHTTP GET http://api.example.com/device-management/managed-devices/{id}  //Get device for given Id\nHTTP PUT http://api.example.com/device-management/managed-devices/{id}  //Update device for given Id\nHTTP DELETE http://api.example.com/device-management/managed-devices/{id}  //Delete device for given Id\n</code></pre></div><h3 id="使用-query-来过滤资源集合" tabindex="-1">使用 query 来过滤资源集合 <a class="header-anchor" href="#使用-query-来过滤资源集合" aria-hidden="true">#</a></h3><p>有时候你需要得到一个过滤/排序后的资源集合，不要为此新建一个 API，而是使用 query 来传入参数，以实现该功能。</p><div class="language-"><pre><code>http://api.example.com/device-management/managed-devices\nhttp://api.example.com/device-management/managed-devices?region=USA\nhttp://api.example.com/device-management/managed-devices?region=USA&amp;brand=XYZ\nhttp://api.example.com/device-management/managed-devices?region=USA&amp;brand=XYZ&amp;sort=installation-date\n</code></pre></div>',26)];var c=e(r,[["render",function(e,i,t,r,c,h){return d(),a("div",null,n)}]]);export{t as __pageData,c as default};
